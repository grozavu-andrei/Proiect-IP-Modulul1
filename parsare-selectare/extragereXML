
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Grozavu
 */
public class CV {

    public static String getName(String path) { //returneaza numele persoanei
        String name = "";
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("PersonName");

            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    name = eElement.getElementsByTagName("FormattedName").item(0).getTextContent();
                }
            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
        }
        return name;
    }

    public static String getEmail(String path) {  //returneaza emailul persoanei
        String email = "";
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("ContactMethod");

            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    email = eElement.getElementsByTagName("InternetEmailAddress").item(0).getTextContent();
                }
            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
        }
        return email;
    }

    public static List<WorkExperience> getWorkExperience(String path) { //returneaza array de obiecte WorkExperience cu toate atributele
        List<WorkExperience> workExperience;
        workExperience = new ArrayList<>();
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("EmployerOrg");

            for (int i = 0; i < nList.getLength(); i++) {
                String jobTitle = "";
                String startDate = "";
                String endDate = "Present";
                int experienceYears;
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    jobTitle = eElement.getElementsByTagName("Title").item(0).getTextContent();
                    startDate = eElement.getElementsByTagName("StartDate").item(0).getTextContent();
                    NodeList endList = eElement.getElementsByTagName("EndDate");
                    if (endList.getLength() != 0) {
                        endDate = eElement.getElementsByTagName("EndDate").item(0).getTextContent();
                    }
                }
                if (!"Present".equals(endDate)) {
                    experienceYears = Integer.parseInt(endDate.substring(1, 5)) - Integer.parseInt(startDate.substring(1, 5));
                } else {
                    experienceYears = 2017 - Integer.parseInt(startDate.substring(1, 5));
                }
                workExperience.add(new WorkExperience(jobTitle, experienceYears));
            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
        }
        return workExperience;
    }

    public static int[] getStudiesExperience(String path) { //returneaza un array. [0]-returneaza certificate [1]-returneaza study years
        int degree = 0;
        int studiesYears = 0;
        int[] studies=new int[2];
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("SchoolOrInstitution");

            for (int i = 0; i < nList.getLength(); i++) {
                String degreeName;
                String startDate = "";
                String endDate = "";
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
                    degreeName = eElement.getElementsByTagName("DegreeName").item(0).getTextContent();
                    if (degreeName.equals("MS") | degreeName.equals("masters") | degreeName.equals("Masters") | degreeName.equals("ms")) {
                        if (degree < 4) {
                            degree = 4;
                        }
                    }
                    if (degreeName.equals("BCs") | degreeName.equals("BCS") | degreeName.equals("BC") | degreeName.equals("bc") | degreeName.equals("Bachelors") | degreeName.equals("bachelors")) {
                        if (degree < 2) {
                            degree = 2;
                        }
                    }
                    if (degreeName.equals("Doctorate") | degreeName.equals("PHD") | degreeName.equals("PhD") | degreeName.equals("doctorate")) {
                        if (degree < 6) {
                            degree = 6;
                        }
                    }

                    NodeList startList = eElement.getElementsByTagName("StartDate");
                    if (startList.getLength() != 0) {
                        startDate = eElement.getElementsByTagName("StartDate").item(0).getTextContent();
                    }

                    NodeList endList = eElement.getElementsByTagName("EndDate");
                    if (endList.getLength() != 0) {
                        endDate = eElement.getElementsByTagName("EndDate").item(0).getTextContent();
                    }

                    if (!startDate.equals("") & !endDate.equals("")) {
                        studiesYears += Integer.parseInt(endDate.substring(1, 5)) - Integer.parseInt(startDate.substring(1, 5));
                    }
                }
            }

        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
        }
        
        studies[0]=degree;
        studies[1]=studiesYears;
        return studies;
    }
     public static List<String> getSkills(String path) throws SAXException, ParserConfigurationException {
         List<String> skills;
         skills= new ArrayList<>();
         String skill=null;
         Map<String, String> map = new LinkedHashMap<>();
        try {
            File fXmlFile = new File(path);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("Qualifications");
            Element qualificationsElement = (Element) nList.item(0);
            findElementsWithValues(map, qualificationsElement,skills);
            }
        catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
        }
        return skills;
    }
     private static void findElementsWithValues(Map<String, String> map, Element rootElement,List<String> skills) {
        NodeList childNodes = rootElement.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node node = childNodes.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element) node;
                String value = element.getAttribute("name");
                if (!value.isEmpty()) {
                    String tagName = element.getTagName();
                    map.put(tagName, value);
                    skills.add(value);
                }else{
                    findElementsWithValues(map, element,skills);
                }
            }
        }
   }
}
