
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;


public class Main {

    private static void getFiles(final File folder) throws IOException, SAXException, ParserConfigurationException, SQLException {
        int numar = 100;
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                getFiles(fileEntry);
            } else {
                String path = folder.toString();
                path += "\\" + fileEntry.getName();
                System.out.println(path);
                numar++;
                System.out.println(numar);
                populate(path, numar);
            }
        }
    }

    public static int valoareTSkill(String skill, String tipCautare) throws FileNotFoundException, IOException {
        String filePath = null;
        if (tipCautare.equals("oop")) {
            filePath = "top-oop.txt";
        } else if (tipCautare.equals("web")) {
            filePath = "top-web.txt";
        } else if (tipCautare.equals("general")) {
            filePath = "top-general.txt";
        }
        HashMap<String, Integer> map = new HashMap<String, Integer>();
 
        String line;
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(":", 2);
            if (parts.length >= 2) {
                String key = parts[0];
                int value = Integer.parseInt(parts[1]);
                map.put(key, value);
            } else {
                System.out.println("ignoring line: " + line);
            }
        }
        int sum = 0;
        for (String key : map.keySet()) {
//            System.out.println(key + ":" + map.get(key));
            if(skill.toLowerCase().contains(key.toLowerCase())) {
                sum = sum + map.get(key);
            }
        }
        reader.close();
        return sum;
    }
    
    public static int softskillsValoare(String skill) throws FileNotFoundException, IOException{
        HashMap<String, Integer> dictionary = new HashMap<>();
        String CurrentLine;
        int sum = 0;
        try (BufferedReader br = new BufferedReader(new FileReader("Dictionar.txt"))) {
            while ((CurrentLine = br.readLine()) != null) {
                String[] arr = CurrentLine.split(", ");
                dictionary.put(arr[0],Integer.parseInt(arr[1]));
            }
            for (String key : dictionary.keySet()) {
                if(skill.toLowerCase().contains(key.toLowerCase())) {
                    sum = sum + dictionary.get(key);
                }
            }
        }
        return sum;
    }

    private static void populate(String path, int numar) throws SAXException, ParserConfigurationException, SQLException {
        String name = CV.getName(path);
        String email = CV.getEmail(path);
        List<WorkExperience> workExperience = CV.getWorkExperience(path);

        int studies[] = CV.getStudiesExperience(path);
        List<String> skills = CV.getSkills(path);
        Connection con = DB.GetConn();
        int var = 0;
        PreparedStatement pstmt;
        pstmt = con.prepareStatement("insert into curriculumvitae (id,name,email) values (?,?,?)");

        pstmt.setInt(1, numar);
        pstmt.setString(2, name);
        pstmt.setString(3, email);
        pstmt.executeUpdate();
        pstmt.close();

        for (int i = 0; i < workExperience.size(); i++) {
            pstmt = con.prepareStatement("insert into experience (cv_id,job_title,experience_years) values (?,?,?)");
            pstmt.setInt(1, numar);
            pstmt.setString(2, workExperience.get(i).jobTitle);
            pstmt.setInt(3, workExperience.get(i).experienceYears);
            pstmt.executeUpdate();
            var += workExperience.get(i).experienceYears;
            pstmt.close();
        }

        pstmt.close();
        pstmt = con.prepareStatement("update curriculumvitae set experience_years = (?) where id =10");

        pstmt.setInt(1, var);
        pstmt.executeUpdate();
        pstmt.close();

        for (int i = 0; i < skills.size(); i++) {
            pstmt = con.prepareStatement("insert into softskills (cv_id,skill,valoare) values (?,?,?)");
            pstmt.setInt(1, numar);
            pstmt.setString(2, skills.get(i));
            pstmt.setInt(3, valoare(skills.get(i)));
            pstmt.executeUpdate();
            pstmt.close();
        }

        pstmt.close();
        
        pstmt = con.prepareStatement("insert into studies (cv_id,certificate,study_years) values (?,?,?)");

        pstmt.setInt(1, numar);
        pstmt.setInt(2, studies[0]);
        pstmt.setInt(3, studies[1]);
        pstmt.executeUpdate();
        pstmt.close();
    }

    public static void main(final String[] args) throws IOException, SAXException, ParserConfigurationException, SQLException {
        final File folder = new File("C:\\Users\\Grozavu\\Desktop\\xml-uri");
        getFiles(folder);
    }
}
