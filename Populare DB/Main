
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

public class Main {

    private static void getFiles(final File folder) throws IOException, SAXException, ParserConfigurationException, SQLException {
        int numar = 100;
        String workExperiencePath="C:\\Users\\Grozavu\\Desktop\\Topuri\\workExperienceTop.txt";
        String softSkillsPath="Dictionar.txt";
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                getFiles(fileEntry);
            } else {
                String path = folder.toString();
                path += "\\" + fileEntry.getName();
                System.out.println(path);
                numar++;
                System.out.println("cv : "+numar);
                populate(path, numar,workExperiencePath,softSkillsPath);
            }
        }
    }

    public static int technicalSkillsValue(String skill, String cautare) throws FileNotFoundException, IOException {
        String filePath = "top-" + cautare + ".txt";
        HashMap<String, Integer> map = new HashMap<String, Integer>();

        String line;
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(":", 2);
            String key = parts[0];
            int value = Integer.parseInt(parts[1]);
            map.put(key, value);

        }

        int sum = 0;
        for (String key : map.keySet()) {
            if (skill.toLowerCase().contains(key.toLowerCase())) {
                sum = sum + map.get(key);
            }
        }
        reader.close();
        return sum;
    }

    public static int softSkillsValue(String skill,String softSkillsPath) throws FileNotFoundException, IOException {
        HashMap<String, Integer> dictionary = new HashMap<>();
        String CurrentLine;
        int sum = 0;
        try (BufferedReader br = new BufferedReader(new FileReader(softSkillsPath))) {
            while ((CurrentLine = br.readLine()) != null) {
                String[] arr = CurrentLine.split(", ");
                dictionary.put(arr[0], Integer.parseInt(arr[1]));
            }
            for (String key : dictionary.keySet()) {
                if (skill.toLowerCase().contains(key.toLowerCase())) {
                    sum = sum + dictionary.get(key);
                }
            }
        }
        return sum;
    }

    private static int studiesValue(String path) throws SAXException, ParserConfigurationException, SQLException {
        int[] Studies = new int[2];
        int values;
        Connection con = DB.GetConn();
        Studies = CV.getStudiesExperience(path);
        values = Studies[0] * 100 + Studies[1];
        return values;
    }

    private static void populate(String path, int number, String workExperiencePath,String softSkillsPath) throws SAXException, ParserConfigurationException, SQLException, IOException {
        String name = CV.getName(path);
        String email = CV.getEmail(path);
        List<WorkExperience> workExperience = CV.getWorkExperience(path,workExperiencePath);

        int studies[] = CV.getStudiesExperience(path);
        List<String> skills = CV.getSkills(path);
        Connection con = DB.GetConn();
        int var = 0;
        PreparedStatement pstmt;
        
        //////////////////////////////////curriculum vitae///////////////////////////////////
        pstmt = con.prepareStatement("insert into curriculumvitae (id,name,email) values (?,?,?)");

        pstmt.setInt(1, number);
        pstmt.setString(2, name);
        pstmt.setString(3, email);
        pstmt.executeUpdate();
        pstmt.close();

        
        //////////////////////////////////work experience////////////////////////////////////
        for (int i = 0; i < workExperience.size(); i++) {
            pstmt = con.prepareStatement("insert into experience (cv_id,job_title,experience_years,value) values (?,?,?,?)");
            pstmt.setInt(1, number);
            pstmt.setString(2, workExperience.get(i).jobTitle);
            pstmt.setInt(3, workExperience.get(i).experienceYears);
            pstmt.setInt(4, workExperience.get(i).value);
            pstmt.executeUpdate();
            var += workExperience.get(i).experienceYears;
            pstmt.close();
            
//            pstmt = con.prepareStatement("update experience set value=? where cv_id=?");
//            pstmt.setInt(1, workExperience.get(i).value);
//            pstmt.setInt(2, numar);
//            pstmt.executeUpdate();
//            pstmt.close();
        }

        pstmt.close();
        
        ///////////////////////   suma experience years   //////////////////////////////////
        Statement stmt = con.createStatement();
        int c = 0;
        ResultSet rs;
        String query;
        for (int i = 101; i <= 198; i++) {
            query = "select sum(experience_years) from experience where cv_id= " + i;
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                c = rs.getInt("sum(experience_years)");
            }
            pstmt = con.prepareStatement("update curriculumvitae set experience_years = (?) where id =" + i);
            pstmt.setInt(1, c);
            pstmt.executeUpdate();
            pstmt.close();
        }
        stmt.close();
        
        ////////////////////////// technical skills///////////////////////////////////
        for (int i = 0; i < skills.size(); i++) {
            pstmt = con.prepareStatement("insert into technicalskills (cv_id,skill,value) values (?,?,?)");
            if(technicalSkillsValue(skills.get(i),"oop")!=0)
            {
                pstmt.setInt(1, number);
                pstmt.setString(2, skills.get(i));
                pstmt.setInt(3, technicalSkillsValue(skills.get(i),"oop"));
                pstmt.executeUpdate();
            }
            pstmt.close();
        }

        pstmt.close();
        
        ////////////////////////// soft skills///////////////////////////////////
        for (int i = 0; i < skills.size(); i++) {
            pstmt = con.prepareStatement("insert into softskills (cv_id,skill,value) values (?,?,?)");
            if(softSkillsValue(skills.get(i),softSkillsPath)!=0)
            {
                pstmt.setInt(1, number);
                pstmt.setString(2, skills.get(i));
                pstmt.setInt(3, softSkillsValue(skills.get(i),softSkillsPath));
                pstmt.executeUpdate();
            }
            pstmt.close();
        }

        pstmt.close();

        ///////////////////////////////////studies//////////////////////////////////
        pstmt = con.prepareStatement("insert into studies (cv_id,certificate,study_years,value) values (?,?,?,?)");

        pstmt.setInt(1, number);
        pstmt.setInt(2, studies[0]);
        pstmt.setInt(3, studies[1]);
        pstmt.setInt(4, studiesValue(path));
        pstmt.executeUpdate();
        pstmt.close();
    }

    public static void main(final String[] args) throws IOException, SAXException, ParserConfigurationException, SQLException {
        final File folder = new File("C:\\Users\\Grozavu\\Desktop\\xml-uri");
        getFiles(folder);
    }
}
